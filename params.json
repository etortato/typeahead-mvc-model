{"name":"Typeahead-mvc-model","tagline":"Extends Twitter's typeahead.js to work with MVC 5 models","body":"# typeahead-mvc-model\r\nExtends Twitter's typeahead.js to work with MVC 5 models\r\n\r\nThis package extends upon the Twitter.Typeahead library and the Twitter.Typeahead.MVC library by hooking typeahead to MVC models. With a few configuration tweaks, you'll be connecting typeahead.js to your model in minutes!\r\n\r\nHow to Setup Twitter Typeahead.js to work with MVC Models\r\n\r\n(Note: to use the Entity Framework queries in this document, you will need to install the Adventure Works database from here: https://msftdbprodsamples.codeplex.com/releases/view/55330. If you don’t need to connect to a database or have a database connection, skip ahead.  Likewise, if you already have a model you would like to connect to typeahead, skip right ahead.)\r\n\r\n1.\tEdit ~\\Views\\Shared\\_Layout.cshtml to load the typeahead.js bundle, Typeahead stylesheet and javascript that connects Typeahead to your MVC 5 model\r\n\r\na.\tAdd the line to load the Typeahead stylesheet\r\nIn ~\\Views\\Shared\\_Layout.cshtml, add the following line before the close of the head tag:\r\n\r\n````html\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"~/Content/typeahead.css\" />\r\n````\r\n\r\nb.\tAdd the line to load the Typeahead MVC bundle javascript and Typeahead MVC Model javascript (that connects Typeahead to your MVC model):\r\n\r\nIn ~\\Views\\Shared\\_Layout.cshtml, add the following line after jquery and bootstrap are both loaded:\r\n\r\n''''html\r\n    @Scripts.Render(\"~/bundles/typeahead\")\r\n    <script src=\"~/Scripts/typeahead.mvc.model.js\" />\r\n````    \r\n    \r\n2.\tAdd a new Model to your project\r\n\r\na.\tRight-click on the Models folder and choose Add > New Item…\r\n\r\nb.\tFor the Name, type HelloWorld.cs and click Add\r\n\r\nc.\tIn the Editor, add 3 new properties to the class. Hit F6 to Save and Build your project\r\n\r\n''''c#\r\n        public int HelloWorldId { get; set; }\r\n        public string Message { get; set; }\r\n        public string Person { get; set; }\r\n        public int PersonId { get; set; }\r\n````\r\n\r\n3.\tAdd the Entity Framework for AdventureWorks2012 to your project.\r\n\r\na.\tRight-click on your project and choose Add > New Item…\r\n\r\nb.\tChoose “ADO.NET Entity Data Model”. For Name, type “AWModel.” Click Add\r\n\r\nc.\tChoose “EF Designer from data…” Click Next >\r\n\r\nd.\tClick New Connection…\r\n\r\ne.\tFor Server name, type the name of the server you attached the AdventureWorks2012 database to. For “Select or enter a database name”, choose AdventureWorks2012. Click Ok\r\n\r\nf.\tFor “Save connection settings in Web.Config as”, type AWEntities. Click Next >\r\n\r\ng.\tExpand Tables and Person. Choose Person\r\n\r\nh.\tFor Model Namespace, type AWModel. Click Finish\r\n\r\ni.\tFor some reason, Entity Framework does not like it when an entity’s primary key does not match the entity name. To fix this, open up AWModel.edmx\r\n\r\nj.\tRename the BusinessEntityId column to PersonId. Hit F6 to Save and Build your project\r\n\r\n4.\tAdd a new Scaffolded Item to your project\r\n\r\na.\tRight-click on the Controllers folder and choose Add > New Scaffolded Item…\r\n\r\nb.\tChoose “MVC 5 Controller with views, using Entity Framework”. Click Add\r\n\r\nc.\tFor the Model class, choose HelloWorld ([Project Name].Models)\r\n\r\nd.\tFor the Data context class, choose the data context you created earlier, AWEntities ([Project Name])\r\n\r\ne.\tFor the Controller name, HelloWorldController. Click Add\r\n\r\n5.\tYou now have a Controller, Model and View. It’s time to get to work!\r\n6.\tOpen up HelloWorldController.cs.\r\n7.\tNear the top of the file, add the using statements for Entity Framework exceptions:\r\n\r\n````c#\r\nusing System.Data.Entity.Core;\r\n````\r\n\r\n8.\tAdd code to get people out of the AdventureWorks2012 database using Entity Framework:\r\n\r\n````c#\r\nprivate List<Autocomplete> _GetPeople(string query)\r\n{\r\n    List<Autocomplete> people = new List<Autocomplete>();\r\n    try\r\n    {\r\n        var results = (from p in db.People\r\n                       where (p.FirstName + \" \" + p.LastName).Contains(query)\r\n                       orderby p.FirstName,p.LastName\r\n                       select p).Take(10).ToList();\r\n        foreach (var r in results)\r\n        {\r\n            // create objects\r\n            Autocomplete person = new Autocomplete();\r\n\r\n            person.Name = string.Format(\"{0} {1}\", r.FirstName, r.LastName);\r\n            person.Id = r.PersonId;\r\n            people.Add(person);\r\n        }\r\n\r\n    }\r\n    catch (EntityCommandExecutionException eceex)\r\n    {\r\n        if (eceex.InnerException != null)\r\n        {\r\n            throw eceex.InnerException;\r\n        }\r\n        throw;\r\n    }\r\n    catch\r\n    {\r\n        throw;\r\n    }\r\n    return people;\r\n}\r\n\r\n9.\tAdd code to return the people in JSON format:\r\n\r\n````c#\r\n        public ActionResult GetPeople(string query)\r\n        {\r\n            return Json(_GetPeople(query), JsonRequestBehavior.AllowGet);\r\n        }\r\n````        \r\n        \r\n10.\tAdd a using statement after the @model line at the top of the file so our HtmlHelper is available in the View:\r\n\r\n@using WebApplication2.Models\r\n\r\n11.\tSince we are hiding the PersonId, we can remove the following code from the View:\r\n\r\n12.\tFor model.Name, we need to change the control from EditorFor to AutocompleteFor. We also need to specify the key field, the method that Typeahead will call to get the people. The last parameter is false which will not have this field get the focus when the page is opened.\r\n\r\n@Html.AutocompleteFor(model => model.Name, model => model.PersonId, \"GetPeople\", \"HelloWorld\", false)\r\n\r\n13.\tIn HelloWorldController, set a breakpoint in the second Create() (under the [HttpPost] declaration) to inspect the results returned from web page after we test out Typeahead\r\n\r\n14.\tSet a breakpoint on the first line in the Create() method (underneath the HttpPost() declaration)\r\n\r\n15.\tGo back to Create.cshtml and hit F5 to test things out\r\n\r\n16.\tFor Message, type “Hello World!”\r\n\r\n17.\tFor Name, type “Anna.”  It might take a second or two but the list will populate with the top 10 matches. Choose “Anna Albright”\r\n\r\n18.\tNotice that, in your breakpoint, if you expand “helloWorld”, that PersonId is automatically set to 325.  Neat, huh?\r\n\r\n19.\tI will leave it to you to implement writing helloWorld back at to a database.  This is an example after all \r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}