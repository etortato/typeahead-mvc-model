{"name":"Typeahead.js for MVC 5 Models","tagline":"Extends Twitter's typeahead.js to work with MVC 5 models","body":"# typeahead-mvc-model\r\nExtends Twitter's typeahead.js to work with MVC 5 models\r\n\r\nThis package extends upon the Twitter.Typeahead library and the Twitter.Typeahead.MVC library by hooking typeahead to MVC models. With a few configuration tweaks, you'll be connecting typeahead.js to your model in minutes!\r\n\r\n# Screenshot\r\n\r\nHere's a screenshot of Typeahead connected to an MVC model in action (the rest of this README walks you through creating this example):\r\n\r\n![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/preview.png)\r\n\r\n# Download\r\n\r\nDownload Typeahead.js for MVC 5 Models using [NuGet](https://www.nuget.org/packages/Twitter.Typeahead.MVC.Model/)\r\n\r\n# How to Setup Twitter Typeahead.js to work with MVC Models\r\n\r\n*(Note: to use the Entity Framework queries in this document, you will need to install the Adventure Works database from [CodePlex](https://msftdbprodsamples.codeplex.com/releases/view/55330). If you don’t need to connect to a database or have a database connection, skip ahead.  Likewise, if you already have a model you would like to connect to typeahead, skip right ahead. Finally, you can download the full source code  of this example application, including the solution file, at the bottom of this page.)*\r\n\r\n1.\tEdit ~\\Views\\Shared\\_Layout.cshtml to load the typeahead.js bundle, Typeahead stylesheet and javascript that connects Typeahead to your MVC 5 model\r\n\r\n\ta.\tAdd the line to load the Typeahead stylesheet\r\n\tIn ~\\Views\\Shared\\_Layout.cshtml, add the following line before the close of the head tag:\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/typeahead_css.png)\r\n\r\n\t````html\r\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"~/Content/typeahead.css\" />\r\n\t````\r\n\r\n\tb.\tAdd the line to load the Typeahead MVC bundle javascript and Typeahead MVC Model javascript (that connects Typeahead to your MVC model):\r\n\r\n\tIn ~\\Views\\Shared\\_Layout.cshtml, add the following line after jquery and bootstrap are both loaded:\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/typeahead_bundle.png)\r\n\r\n\t````html\r\n\t\t@Scripts.Render(\"~/bundles/typeahead\")\r\n\t\t<script src=\"~/Scripts/typeahead.mvc.model.js\" />\r\n\t````    \r\n    \r\n2.\tAdd a new Model to your project\r\n\r\n\ta.\tRight-click on the Models folder and choose Add > New Item…\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/new_item.png)\r\n\r\n\tb.\tFor the Name, type HelloWorld.cs and click Add\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/add_helloworld.png)\r\n\r\n\tc.\tIn the Editor, add 4 new properties to the class. Hit F6 to Save and Build your project\r\n\r\n\t````c#\r\n\t\t\tpublic int HelloWorldId { get; set; }\r\n\t\t\tpublic string Message { get; set; }\r\n\t\t\tpublic string Person { get; set; }\r\n\t\t\tpublic int PersonId { get; set; }\r\n\t````\r\n\r\n3. Add the Entity Framework for AdventureWorks2012 to your project.\r\n\r\n\ta.\tRight-click on your project and choose Add > New Item…\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/new_item.png)\r\n\r\n\tb.\tChoose “ADO.NET Entity Data Model”. For Name, type “AWModel.” Click Add\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/add_entity_data_model.png)\r\n\r\n\tc.\tChoose “EF Designer from data…” Click Next >\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/choose_model_contents.png)\r\n\r\n\td.\tClick New Connection…\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/new_connection.png)\r\n\r\n\te.\tFor Server name, type the name of the server you attached the AdventureWorks2012 database to. For “Select or enter a database name”, choose AdventureWorks2012. Click Ok\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/connection_properties.png)\r\n\r\n\tf.\tFor “Save connection settings in Web.Config as”, type AWEntities. Click Next >\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/awentities.png)\r\n\r\n\tg.\tExpand Tables and Person. Choose Person. For Model Namespace, type AWModel. Click Finish\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/choose_person.png)\r\n\r\n\th.\tFor some reason, Entity Framework does not like it when an entity’s primary key does not match the entity name. To fix this, open up AWModel.edmx\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/awmodel_edmx.png)\r\n\r\n\ti.\tRename the BusinessEntityId column to PersonId. Hit F6 to Save and Build your project\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/personid.png)\r\n\r\n4.\tAdd a new Scaffolded Item to your project\r\n\r\n\ta.\tRight-click on the Controllers folder and choose Add > New Scaffolded Item…\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/add_new_scaffolded.png)\r\n\r\n\tb.\tChoose “MVC 5 Controller with views, using Entity Framework”. Click Add\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/add_scaffold.png)\r\n\r\n\tc.\tFor the Model class, choose HelloWorld ([Project Name].Models). For the Data context class, choose the data context you created earlier, AWEntities ([Project Name]). For the Controller name, HelloWorldController. Click Add\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/add_controller.png)\r\n\r\n\t*You now have a Controller, Model and View. It’s time to get to work!*\r\n\r\n5.\tAdd code to the HelloWorldController to get people from the database\r\n\r\n\ta.\tOpen up HelloWorldController.cs\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/helloworldcontroller_cs.png)\r\n\r\n\tb.\tNear the top of the file, add the using statements for Entity Framework exceptions:\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/entity_core.png)\r\n\r\n\t````c#\r\n\tusing System.Data.Entity.Core;\r\n\t````\r\n\r\n\tc.\tAdd code to get people out of the AdventureWorks2012 database using Entity Framework:\r\n\r\n\t````c#\r\n\tprivate List<Autocomplete> _GetPeople(string query)\r\n\t{\r\n\t\tList<Autocomplete> people = new List<Autocomplete>();\r\n\t\ttry\r\n\t\t{\r\n\t\t\tvar results = (from p in db.People\r\n\t\t\t\t\t\t\twhere (p.FirstName + \" \" + p.LastName).Contains(query)\r\n\t\t\t\t\t\t\torderby p.FirstName,p.LastName\r\n\t\t\t\t\t\t\tselect p).Take(10).ToList();\r\n\t\t\tforeach (var r in results)\r\n\t\t\t{\r\n\t\t\t\t// create objects\r\n\t\t\t\tAutocomplete person = new Autocomplete();\r\n\r\n\t\t\t\tperson.Name = string.Format(\"{0} {1}\", r.FirstName, r.LastName);\r\n\t\t\t\tperson.Id = r.PersonId;\r\n\t\t\t\tpeople.Add(person);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tcatch (EntityCommandExecutionException eceex)\r\n\t\t{\r\n\t\t\tif (eceex.InnerException != null)\r\n\t\t\t{\r\n\t\t\t\tthrow eceex.InnerException;\r\n\t\t\t}\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\tcatch\r\n\t\t{\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\treturn people;\r\n\t}\r\n\t````\r\n\r\n\td.\tAdd code to return the people in JSON format:\r\n\r\n\t````c#\r\n\tpublic ActionResult GetPeople(string query)\r\n\t{\r\n\t\treturn Json(_GetPeople(query), JsonRequestBehavior.AllowGet);\r\n\t}\r\n\t````        \r\n        \r\n6. Add the Autocomplete (textahead) control to the Create view for the HelloWorld model\r\n\r\n\ta. Open up ~\\Views\\HelloWorld\\Create.cshtml.\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/create_cshtml.png)\r\n\r\n\tb. Add a using statement after the @model line at the top of the file so our HtmlHelper is available in the View:\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/cshtml_using.png)\r\n\r\n\t````html\r\n\t@using WebApplication2.Models\r\n\t````\r\n\r\n\tc.\tSince we are hiding the PersonId, we can remove the following code from the View:\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/remove.png)\r\n\r\n\td.\tAdd the PersonId property to the view, yet hide it. This property will be auto-populated by javascript after the user selects a typeahead value\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/hidden_personid.png)\r\n\r\n\t````\r\n\t@Html.HiddenFor(model => model.PersonId)\r\n\t````\r\n\r\n\te.\tWe need to change the control from EditorFor to AutocompleteFor. We also need to specify the property name, property key field, the method that Typeahead will call to get the lookup values and keys. The last parameter is false which will keep this field from stealing the focus when the page is loaded.\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/autocompletefor.png)\r\n\r\n\t````html\r\n\t@Html.AutocompleteFor(model => model.Name, model => model.PersonId, \"GetPeople\", \"HelloWorld\", false)\r\n\t````\r\n\r\n7.\tTest things out to see how they work\r\n\r\n\ta.\tIn HelloWorldController, set a breakpoint in the second Create() (under the [HttpPost] declaration) to inspect the results returned from web page after we test out Typeahead\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/breakpoint.png)\r\n\r\n\tb.\tOpen up Create.cshtml again and hit F5 to test things out\r\n\r\n\tc.\tFor Message, type “Hello World!” For Name, type “Anna.” It might take a second or two but the list will populate with the top 10 matches. Choose “Anna Albright” Click Create\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/preview.png)\r\n\r\n\td. This should hit the breakpoint you set on Create()\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/breakpoint_hit.png)\r\n\r\n\te.\tNotice that, in your breakpoint, if you expand “helloWorld”, that PersonId is automatically set to 325. Neat, huh?\r\n\r\n\t![Alt text](https://raw.githubusercontent.com/timdwilson/typeahead-mvc-model/master/doc/images/watch.png)\r\n\r\n**I will leave it to you to implement writing helloWorld back at to a database. This is an example after all :) Happy coding!**\r\n\r\n##[Download](https://github.com/timdwilson/typeahead-mvc-model/blob/master/example/TypeaheadMvcModelExampleApp.zip?raw=true) the example application.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}